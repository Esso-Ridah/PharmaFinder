version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pharmafinder_db
    environment:
      POSTGRES_DB: pharmafinder_db
      POSTGRES_USER: pharma_user
      POSTGRES_PASSWORD: pharma_pass
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/models.sql:/docker-entrypoint-initdb.d/01-models.sql
      - ./database/sample_data.sql:/docker-entrypoint-initdb.d/02-sample_data.sql
    networks:
      - pharmafinder_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pharma_user -d pharmafinder_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: pharmafinder_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pharmafinder_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pharmafinder_backend
    environment:
      - DATABASE_URL=postgresql://pharma_user:pharma_pass@postgres:5432/pharmafinder_db
      - REDIS_URL=redis://redis:6379
      - DEBUG=True
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pharmafinder_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: pharmafinder_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NODE_ENV=development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - pharmafinder_network
    restart: unless-stopped

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: pharmafinder_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - pharmafinder_network
    restart: unless-stopped
    profiles:
      - production

  # Celery Worker for background tasks
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pharmafinder_celery_worker
    command: celery -A app.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://pharma_user:pharma_pass@postgres:5432/pharmafinder_db
      - REDIS_URL=redis://redis:6379
      - DEBUG=True
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pharmafinder_network
    restart: unless-stopped
    profiles:
      - production

  # Celery Beat for scheduled tasks
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pharmafinder_celery_beat
    command: celery -A app.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://pharma_user:pharma_pass@postgres:5432/pharmafinder_db
      - REDIS_URL=redis://redis:6379
      - DEBUG=True
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pharmafinder_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  pharmafinder_network:
    driver: bridge