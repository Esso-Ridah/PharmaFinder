#!/usr/bin/env python3
"""
Script pour cr√©er des donn√©es de d√©mo pour PharmaFinder
avec pharmacies, produits et sponsoring
"""

import asyncio
import sys
from datetime import datetime, timedelta
from decimal import Decimal
import uuid

sys.path.append('.')

from app.database import AsyncSessionLocal, async_engine
from app.models import (
    Base, User, Pharmacy, Product, Category, PharmacyInventory, 
    UserRole
)
from sqlalchemy import select


async def create_demo_data():
    """Cr√©er les donn√©es de d√©mo"""
    async with AsyncSessionLocal() as db:
        print("üèóÔ∏è  Cr√©ation des donn√©es de d√©mo...")
        
        # 1. Cr√©er des cat√©gories (v√©rifier si elles existent d√©j√†)
        categories_data = [
            {"name": "Antibiotiques", "slug": "antibiotiques", "description": "M√©dicaments contre les infections"},
            {"name": "Antalgiques", "slug": "antalgiques", "description": "M√©dicaments contre la douleur"},
            {"name": "Antifongiques", "slug": "antifongiques", "description": "Traitement des mycoses"},
            {"name": "Vitamines", "slug": "vitamines", "description": "Compl√©ments vitaminiques"},
            {"name": "Digestifs", "slug": "digestifs", "description": "Troubles digestifs"},
            {"name": "Cardiovasculaire", "slug": "cardiovasculaire", "description": "Sant√© du c≈ìur"},
        ]
        
        categories = []
        categories_created = 0
        for cat_data in categories_data:
            # V√©rifier si la cat√©gorie existe d√©j√†
            result = await db.execute(select(Category).where(Category.slug == cat_data["slug"]))
            existing_category = result.scalar_one_or_none()
            
            if existing_category:
                categories.append(existing_category)
                print(f"üìÇ Cat√©gorie '{cat_data['name']}' existe d√©j√†")
            else:
                category = Category(**cat_data)
                db.add(category)
                categories.append(category)
                categories_created += 1
        
        if categories_created > 0:
            await db.commit()
            print(f"‚úÖ {categories_created} nouvelles cat√©gories cr√©√©es")
        else:
            print("‚úÖ Toutes les cat√©gories existent d√©j√†")
        
        # 2. Cr√©er des utilisateurs pharmaciens (v√©rifier s'ils existent d√©j√†)
        pharmacists_data = [
            {"email": "pharmacie.centrale@gmail.com", "first_name": "Marie", "last_name": "Dupont", "phone": "+228 22 45 67 89"},
            {"email": "pharmacie.nord@gmail.com", "first_name": "Jean", "last_name": "Martin", "phone": "+228 22 55 77 99"},
            {"email": "pharmacie.sud@gmail.com", "first_name": "Fatou", "last_name": "Kone", "phone": "+228 22 33 44 55"},
            {"email": "pharmacie.ouest@gmail.com", "first_name": "Paul", "last_name": "Adjovi", "phone": "+228 22 66 88 00"},
            {"email": "pharmacie.est@gmail.com", "first_name": "Ama", "last_name": "Togo", "phone": "+228 22 77 99 11"},
        ]
        
        pharmacists = []
        pharmacists_created = 0
        for ph_data in pharmacists_data:
            # V√©rifier si l'utilisateur existe d√©j√†
            result = await db.execute(select(User).where(User.email == ph_data["email"]))
            existing_pharmacist = result.scalar_one_or_none()
            
            if existing_pharmacist:
                pharmacists.append(existing_pharmacist)
                print(f"üë§ Pharmacien '{ph_data['email']}' existe d√©j√†")
            else:
                from app.auth import get_password_hash
                pharmacist = User(
                    email=ph_data["email"],
                    password_hash=get_password_hash("password123"),
                    first_name=ph_data["first_name"],
                    last_name=ph_data["last_name"],
                    phone=ph_data["phone"],
                    role=UserRole.PHARMACIST
                )
                db.add(pharmacist)
                pharmacists.append(pharmacist)
                pharmacists_created += 1
        
        if pharmacists_created > 0:
            await db.commit()
            print(f"‚úÖ {pharmacists_created} nouveaux pharmaciens cr√©√©s")
        else:
            print("‚úÖ Tous les pharmaciens existent d√©j√†")
        
        # 3. Cr√©er des pharmacies (v√©rifier si elles existent d√©j√†)
        pharmacies_data = [
            {
                "name": "Pharmacie Centrale", 
                "license_number": "PH-001-LM", 
                "address": "123 Avenue de la Paix, Lom√©", 
                "city": "Lom√©",
                "latitude": Decimal("6.1319"), 
                "longitude": Decimal("1.2228"),
                "phone": "+228 22 45 67 89",
                "is_verified": True
            },
            {
                "name": "Pharmacie du Nord", 
                "license_number": "PH-002-LM", 
                "address": "456 Rue de Tokoin, Lom√©", 
                "city": "Lom√©",
                "latitude": Decimal("6.1629"), 
                "longitude": Decimal("1.2306"),
                "phone": "+228 22 55 77 99",
                "is_verified": True
            },
            {
                "name": "Pharmacie du Sud", 
                "license_number": "PH-003-LM", 
                "address": "789 Boulevard Ny√©konakpo√©, Lom√©", 
                "city": "Lom√©",
                "latitude": Decimal("6.1083"), 
                "longitude": Decimal("1.2125"),
                "phone": "+228 22 33 44 55",
                "is_verified": True
            },
            {
                "name": "Pharmacie de l'Ouest", 
                "license_number": "PH-004-LM", 
                "address": "321 Rue d'Amoutiv√©, Lom√©", 
                "city": "Lom√©",
                "latitude": Decimal("6.1450"), 
                "longitude": Decimal("1.1978"),
                "phone": "+228 22 66 88 00",
                "is_verified": False
            },
            {
                "name": "Pharmacie de l'Est", 
                "license_number": "PH-005-LM", 
                "address": "654 Avenue d'Adidogom√©, Lom√©", 
                "city": "Lom√©",
                "latitude": Decimal("6.1700"), 
                "longitude": Decimal("1.2500"),
                "phone": "+228 22 77 99 11",
                "is_verified": True
            },
        ]
        
        pharmacies = []
        pharmacies_created = 0
        for i, ph_data in enumerate(pharmacies_data):
            # V√©rifier si la pharmacie existe d√©j√†
            result = await db.execute(select(Pharmacy).where(Pharmacy.license_number == ph_data["license_number"]))
            existing_pharmacy = result.scalar_one_or_none()
            
            if existing_pharmacy:
                pharmacies.append(existing_pharmacy)
                print(f"üè• Pharmacie '{ph_data['name']}' existe d√©j√†")
            else:
                pharmacy = Pharmacy(
                    **ph_data,
                    owner_id=pharmacists[i].id
                )
                db.add(pharmacy)
                pharmacies.append(pharmacy)
                pharmacies_created += 1
        
        if pharmacies_created > 0:
            await db.commit()
            print(f"‚úÖ {pharmacies_created} nouvelles pharmacies cr√©√©es")
        else:
            print("‚úÖ Toutes les pharmacies existent d√©j√†")
        
        # 4. Cr√©er des produits (v√©rifier s'ils existent d√©j√†)
        products_data = [
            # Antibiotiques
            {"name": "Amoxicilline 500mg", "generic_name": "Amoxicilline", "manufacturer": "Biogaran", "dosage": "500mg", "requires_prescription": True, "category_idx": 0},
            {"name": "Azithromycine 250mg", "generic_name": "Azithromycine", "manufacturer": "Sandoz", "dosage": "250mg", "requires_prescription": True, "category_idx": 0},
            {"name": "Cefixime 200mg", "generic_name": "Cefixime", "manufacturer": "Teva", "dosage": "200mg", "requires_prescription": True, "category_idx": 0},
            
            # Antalgiques (avec plusieurs variantes de Parac√©tamol)
            {"name": "Parac√©tamol 1000mg", "generic_name": "Parac√©tamol", "manufacturer": "Doliprane", "dosage": "1000mg", "requires_prescription": False, "category_idx": 1},
            {"name": "Parac√©tamol 500mg", "generic_name": "Parac√©tamol", "manufacturer": "Dafalgan", "dosage": "500mg", "requires_prescription": False, "category_idx": 1},
            {"name": "Parac√©tamol Effervescent 1000mg", "generic_name": "Parac√©tamol", "manufacturer": "Efferalgan", "dosage": "1000mg", "requires_prescription": False, "category_idx": 1},
            {"name": "Parac√©tamol P√©diatrique 120mg", "generic_name": "Parac√©tamol", "manufacturer": "Doliprane", "dosage": "120mg", "requires_prescription": False, "category_idx": 1},
            {"name": "Ibuprof√®ne 400mg", "generic_name": "Ibuprof√®ne", "manufacturer": "Advil", "dosage": "400mg", "requires_prescription": False, "category_idx": 1},
            {"name": "Aspirine 500mg", "generic_name": "Acide ac√©tylsalicylique", "manufacturer": "Bayer", "dosage": "500mg", "requires_prescription": False, "category_idx": 1},
            
            # Antifongiques
            {"name": "Fluconazole 150mg", "generic_name": "Fluconazole", "manufacturer": "Pfizer", "dosage": "150mg", "requires_prescription": True, "category_idx": 2},
            {"name": "Econazole Cr√®me", "generic_name": "Econazole", "manufacturer": "Pevaryl", "dosage": "1%", "requires_prescription": False, "category_idx": 2},
            
            # Vitamines
            {"name": "Vitamine C 1000mg", "generic_name": "Acide ascorbique", "manufacturer": "Upsa", "dosage": "1000mg", "requires_prescription": False, "category_idx": 3},
            {"name": "Complexe Vitamine B", "generic_name": "Vitamines B", "manufacturer": "Bayer", "dosage": "Multi", "requires_prescription": False, "category_idx": 3},
            {"name": "Vitamine D3 2000UI", "generic_name": "Chol√©calcif√©rol", "manufacturer": "Zyma", "dosage": "2000UI", "requires_prescription": False, "category_idx": 3},
            
            # Digestifs
            {"name": "Om√©prazole 20mg", "generic_name": "Om√©prazole", "manufacturer": "EG", "dosage": "20mg", "requires_prescription": True, "category_idx": 4},
            {"name": "Charbon activ√©", "generic_name": "Charbon activ√©", "manufacturer": "Arkog√©lules", "dosage": "200mg", "requires_prescription": False, "category_idx": 4},
            {"name": "Diosmectite", "generic_name": "Diosmectite", "manufacturer": "Smecta", "dosage": "3g", "requires_prescription": False, "category_idx": 4},
            
            # Cardiovasculaire
            {"name": "Amlodipine 5mg", "generic_name": "Amlodipine", "manufacturer": "Pfizer", "dosage": "5mg", "requires_prescription": True, "category_idx": 5},
            {"name": "Atorvastatine 20mg", "generic_name": "Atorvastatine", "manufacturer": "Lipitor", "dosage": "20mg", "requires_prescription": True, "category_idx": 5},
        ]
        
        products = []
        products_created = 0
        for prod_data in products_data:
            category_idx = prod_data.pop("category_idx")
            
            # V√©rifier si le produit existe d√©j√†
            result = await db.execute(
                select(Product).where(
                    (Product.name == prod_data["name"]) & 
                    (Product.manufacturer == prod_data["manufacturer"])
                )
            )
            existing_product = result.scalar_one_or_none()
            
            if existing_product:
                products.append(existing_product)
                print(f"üíä Produit '{prod_data['name']}' existe d√©j√†")
            else:
                product = Product(
                    **prod_data,
                    category_id=categories[category_idx].id,
                    active_ingredient=prod_data.get("generic_name", ""),
                    description=f"M√©dicament de la cat√©gorie {categories[category_idx].name}",
                    contraindications="Voir notice",
                    side_effects="Voir notice"
                )
                db.add(product)
                products.append(product)
                products_created += 1
        
        if products_created > 0:
            await db.commit()
            print(f"‚úÖ {products_created} nouveaux produits cr√©√©s")
        else:
            print("‚úÖ Tous les produits existent d√©j√†")
        
        # 5. Cr√©er l'inventaire avec sponsoring (v√©rifier s'il existe d√©j√†)
        import random
        
        inventory_items = []
        inventory_created = 0
        sponsor_ranks = [10, 8, 6, 4, 2]  # Rangs de sponsoring
        
        # Assurer que tous les produits Parac√©tamol sont bien repr√©sent√©s dans l'inventaire
        paracetamol_products = [p for p in products if "parac√©tamol" in p.name.lower() or "parac√©tamol" in p.generic_name.lower()]
        
        # Chaque pharmacie a quelques produits en stock
        for pharmacy_idx, pharmacy in enumerate(pharmacies):
            # Chaque pharmacie a entre 12 et 16 produits (plus que before pour assurer la diversit√©)
            num_products = random.randint(12, 16)
            
            # Toujours inclure au moins 2 produits Parac√©tamol dans chaque pharmacie
            selected_products = []
            if paracetamol_products:
                # S√©lectionner 2 produits Parac√©tamol al√©atoirement
                paracetamol_selection = random.sample(paracetamol_products, min(2, len(paracetamol_products)))
                selected_products.extend(paracetamol_selection)
            
            # Compl√©ter avec d'autres produits al√©atoires
            remaining_products = [p for p in products if p not in selected_products]
            remaining_needed = max(0, num_products - len(selected_products))
            if remaining_needed > 0 and remaining_products:
                additional_products = random.sample(remaining_products, min(remaining_needed, len(remaining_products)))
                selected_products.extend(additional_products)
            
            for product_idx, product in enumerate(selected_products):
                # V√©rifier si cet inventaire existe d√©j√†
                result = await db.execute(
                    select(PharmacyInventory).where(
                        (PharmacyInventory.pharmacy_id == pharmacy.id) &
                        (PharmacyInventory.product_id == product.id)
                    )
                )
                existing_inventory = result.scalar_one_or_none()
                
                if existing_inventory:
                    inventory_items.append(existing_inventory)
                    print(f"üì¶ Inventaire '{product.name}' existe d√©j√† pour {pharmacy.name}")
                    continue
                
                # Prix al√©atoire entre 500 et 5000 FCFA
                base_price = random.uniform(500, 5000)
                price = Decimal(str(round(base_price, 2)))
                
                # Quantit√© al√©atoire garantie > 0 (entre 5 et 50)
                quantity = random.randint(5, 50)
                
                # Sponsoring : 40% de chance d'√™tre sponsoris√© (augment√© pour plus de vari√©t√©)
                is_sponsored = random.random() < 0.4
                sponsor_rank = random.choice(sponsor_ranks) if is_sponsored else 0
                sponsor_expires_at = datetime.utcnow() + timedelta(days=30) if is_sponsored else None
                
                inventory = PharmacyInventory(
                    pharmacy_id=pharmacy.id,
                    product_id=product.id,
                    quantity=quantity,
                    price=price,
                    expiry_date=datetime.utcnow().date() + timedelta(days=random.randint(30, 365)),
                    batch_number=f"LOT{pharmacy_idx:02d}{product_idx:03d}",
                    is_sponsored=is_sponsored,
                    sponsor_rank=sponsor_rank,
                    sponsor_expires_at=sponsor_expires_at
                )
                db.add(inventory)
                inventory_items.append(inventory)
                inventory_created += 1
        
        if inventory_created > 0:
            await db.commit()
            print(f"‚úÖ {inventory_created} nouveaux √©l√©ments d'inventaire cr√©√©s avec sponsoring")
        else:
            print("‚úÖ Tous les √©l√©ments d'inventaire existent d√©j√†")
        
        # Statistiques finales
        sponsored_items = sum(1 for item in inventory_items if item.is_sponsored)
        print(f"üìä Statistiques:")
        print(f"   - {sponsored_items}/{len(inventory_items)} produits sponsoris√©s ({sponsored_items/len(inventory_items)*100:.1f}%)")
        print(f"   - {len([p for p in pharmacies if p.is_verified])}/{len(pharmacies)} pharmacies v√©rifi√©es")
        print(f"   - {len([p for p in products if p.requires_prescription])}/{len(products)} produits sur ordonnance")
        
        print("\nüéâ Donn√©es de d√©mo cr√©√©es avec succ√®s!")
        print("\nüìã Comptes de test:")
        for pharmacist in pharmacists:
            print(f"   - {pharmacist.email} / password123")


async def main():
    """Fonction principale"""
    try:
        # Cr√©er les tables si n√©cessaire
        async with async_engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        
        await create_demo_data()
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des donn√©es: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())